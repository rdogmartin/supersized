(function (a) { a.supersized = function (b) { var c = this; c.init = function () { a.supersized.vars = a.extend(a.supersized.vars, a.supersized.themeVars); a.supersized.vars.options = a.extend({}, a.supersized.defaultOptions, a.supersized.themeOptions, b); c.options = a.supersized.vars.options; c._build() }; c._build = function () { var g = 0, d = "", j = "", h, e = "", i; a("body").children(":visible").hide().addClass("supersized_hidden"); a("body").append(a(a.supersized.vars.options.html_template), '<div id="supersized-loader"></div><ul id="supersized"></ul>'); var f = "#supersized"; c.$el = a(f); c.el = f; vars = a.supersized.vars; c.$el.data("supersized", c); api = c.$el.data("supersized"); while (g <= c.options.slides.length - 1) { switch (c.options.slide_links) { case "num": h = g; break; case "name": h = c.options.slides[g].title; break; case "blank": h = ""; break } d = d + '<li class="slide-' + g + '"></li>'; if (g == c.options.start_slide - 1) { if (c.options.slide_links) { j = j + '<li class="slide-link-' + g + ' current-slide"><a>' + h + "</a></li>" } if (c.options.thumb_links) { c.options.slides[g].thumb ? i = c.options.slides[g].thumb : i = c.options.slides[g].image; e = e + '<li class="thumb' + g + ' current-thumb"><img src="' + i + '"/></li>' } } else { if (c.options.slide_links) { j = j + '<li class="slide-link-' + g + '" ><a>' + h + "</a></li>" } if (c.options.thumb_links) { c.options.slides[g].thumb ? i = c.options.slides[g].thumb : i = c.options.slides[g].image; e = e + '<li class="thumb' + g + '"><img src="' + i + '"/></li>' } } g++ } if (c.options.slide_links) { a(vars.slide_list).html(j) } if (c.options.thumb_links && vars.thumb_tray.length) { a(vars.thumb_tray).append('<ul id="' + vars.thumb_list.replace("#", "") + '">' + e + "</ul>") } a(c.el).append(d); if (c.options.thumbnail_navigation) { vars.current_slide - 1 < 0 ? prevThumb = c.options.slides.length - 1 : prevThumb = vars.current_slide - 1; a(vars.prev_thumb).show().html(a("<img/>").attr("src", c.options.slides[prevThumb].image)); vars.current_slide == c.options.slides.length - 1 ? nextThumb = 0 : nextThumb = vars.current_slide + 1; a(vars.next_thumb).show().html(a("<img/>").attr("src", c.options.slides[nextThumb].image)) } c._start() }; c._start = function () { if (c.options.start_slide) { vars.current_slide = c.options.start_slide - 1 } else { vars.current_slide = Math.floor(Math.random() * c.options.slides.length) } var n = c.options.new_window ? ' target="_blank"' : ""; if (c.options.performance == 3) { c.$el.addClass("speed") } else { if ((c.options.performance == 1) || (c.options.performance == 2)) { c.$el.addClass("quality") } } if (c.options.random) { arr = c.options.slides; for (var g, l, h = arr.length; h; g = parseInt(Math.random() * h), l = arr[--h], arr[h] = arr[g], arr[g] = l) { } c.options.slides = arr } if (c.options.slides.length > 1) { if (c.options.slides.length > 2) { vars.current_slide - 1 < 0 ? loadPrev = c.options.slides.length - 1 : loadPrev = vars.current_slide - 1; var f = (c.options.slides[loadPrev].url) ? "href='" + c.options.slides[loadPrev].url + "'" : ""; var p = a('<img src="' + c.options.slides[loadPrev].image + '"/>'); var m = c.el + " li:eq(" + loadPrev + ")"; p.appendTo(m).wrap("<a " + f + n + "></a>").parent().parent().addClass("image-loading prevslide"); p.load(function () { a(this).data("origWidth", a(this).width()).data("origHeight", a(this).height()); c.resizeNow() }) } } else { } f = (api.getField("url")) ? "href='" + api.getField("url") + "'" : ""; var k = a('<img src="' + api.getField("image") + '"/>'); var e = c.el + " li:eq(" + vars.current_slide + ")"; k.appendTo(e).wrap("<a " + f + n + "></a>").parent().parent().addClass("image-loading activeslide").css("visibility", "visible"); k.load(function () { c._origDim(a(this)); c.resizeNow(); c.launch(); if (typeof theme != "undefined" && typeof theme._init == "function") { theme._init() } }); if (c.options.slides.length > 1) { vars.current_slide == c.options.slides.length - 1 ? loadNext = 0 : loadNext = vars.current_slide + 1; f = (c.options.slides[loadNext].url) ? "href='" + c.options.slides[loadNext].url + "'" : ""; var d = a('<img src="' + c.options.slides[loadNext].image + '"/>'); var o = c.el + " li:eq(" + loadNext + ")"; d.appendTo(o).wrap("<a " + f + n + "></a>").parent().parent().addClass("image-loading"); d.load(function () { a(this).data("origWidth", a(this).width()).data("origHeight", a(this).height()); c.resizeNow() }) } c.$el.css("visibility", "hidden"); a(".load-item").hide() }; c.launch = function () { a("#supersized-loader").remove(); if (typeof theme != "undefined" && typeof theme.beforeAnimation == "function") { theme.beforeAnimation("next") } a(".load-item").show(); if (c.options.keyboard_nav) { a(document.documentElement).on("keyup.supersized", function (d) { if (vars.in_animation) { return false } if (a(document.activeElement).is("input, textarea")) { return false } if ((d.keyCode == 37) || (d.keyCode == 40)) { clearInterval(vars.slideshow_interval); c.prevSlide() } else { if ((d.keyCode == 39) || (d.keyCode == 38)) { clearInterval(vars.slideshow_interval); c.nextSlide() } else { if (d.keyCode == 32 && !vars.hover_pause) { clearInterval(vars.slideshow_interval); c.playToggle() } } } }) } if (c.options.slideshow && c.options.pause_hover) { a(c.el).hover(function () { if (vars.in_animation) { return false } vars.hover_pause = true; if (!vars.is_paused) { vars.hover_pause = "resume"; c.playToggle() } }, function () { if (vars.hover_pause == "resume") { c.playToggle(); vars.hover_pause = false } }) } if (c.options.slide_links) { a(vars.slide_list + "> li").click(function () { index = a(vars.slide_list + "> li").index(this); targetSlide = index + 1; c.goTo(targetSlide); return false }) } if (c.options.thumb_links) { a(vars.thumb_list + "> li").click(function () { index = a(vars.thumb_list + "> li").index(this); targetSlide = index + 1; api.goTo(targetSlide); return false }) } if (c.options.slideshow && c.options.slides.length > 1) { if (c.options.autoplay && c.options.slides.length > 1) { vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval) } else { vars.is_paused = true } a(".load-item img").bind("contextmenu mousedown", function () { return false }) } a(window).resize(function () { c.resizeNow() }) }; c.resizeNow = function () { return c.$el.each(function () { a("img", c.el).each(function () { thisSlide = a(this); var e = (thisSlide.data("origHeight") / thisSlide.data("origWidth")).toFixed(2); var d = c.$el.width(), g = c.$el.height(), h; if (c.options.fit_always) { if ((g / d) > e) { f() } else { i() } } else { if ((g <= c.options.min_height) && (d <= c.options.min_width)) { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f(true) : i(true) } else { c.options.fit_portrait && e >= 1 ? i(true) : f(true) } } else { if (d <= c.options.min_width) { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f(true) : i() } else { c.options.fit_portrait && e >= 1 ? i() : f(true) } } else { if (g <= c.options.min_height) { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f() : i(true) } else { c.options.fit_portrait && e >= 1 ? i(true) : f() } } else { if ((g / d) > e) { c.options.fit_landscape && e < 1 ? f() : i() } else { c.options.fit_portrait && e >= 1 ? i() : f() } } } } } function f(j) { if (j) { if (thisSlide.width() < d || thisSlide.width() < c.options.min_width) { if (thisSlide.width() * e >= c.options.min_height) { thisSlide.width(c.options.min_width); thisSlide.height(thisSlide.width() * e) } else { i() } } } else { if (c.options.min_height >= g && !c.options.fit_landscape) { if (d * e >= c.options.min_height || (d * e >= c.options.min_height && e <= 1)) { thisSlide.width(d); thisSlide.height(d * e) } else { if (e > 1) { thisSlide.height(c.options.min_height); thisSlide.width(thisSlide.height() / e) } else { if (thisSlide.width() < d) { thisSlide.width(d); thisSlide.height(thisSlide.width() * e) } } } } else { thisSlide.width(d); thisSlide.height(d * e) } } } function i(j) { if (j) { if (thisSlide.height() < g) { if (thisSlide.height() / e >= c.options.min_width) { thisSlide.height(c.options.min_height); thisSlide.width(thisSlide.height() / e) } else { f(true) } } } else { if (c.options.min_width >= d) { if (g / e >= c.options.min_width || e > 1) { thisSlide.height(g); thisSlide.width(g / e) } else { if (e <= 1) { thisSlide.width(c.options.min_width); thisSlide.height(thisSlide.width() * e) } } } else { thisSlide.height(g); thisSlide.width(g / e) } } } if (thisSlide.parents("li").hasClass("image-loading")) { a(".image-loading").removeClass("image-loading") } if (c.options.horizontal_center) { a(this).css("left", (d - a(this).width()) / 2) } if (c.options.vertical_center) { a(this).css("top", (g - a(this).height()) / 2) } }); if (c.options.image_protect) { a("img", c.el).bind("contextmenu mousedown", function () { return false }) } return false }) }; c.nextSlide = function () { if (c.options.slideshow && !vars.is_paused && c.options.auto_exit && (vars.current_slide == c.options.slides.length - 1)) { c.destroy(); return false } var h = vars.current_slide; if (vars.current_slide < c.options.slides.length - 1) { vars.current_slide++ } else { if (c.options.loop) { vars.current_slide = 0 } } if (h == vars.current_slide) { vars.in_animation = false; return false } if (vars.in_animation || !api.options.slideshow) { return false } else { vars.in_animation = true } clearInterval(vars.slideshow_interval); var g = c.options.slides, d = c.$el.find(".activeslide"); a(".prevslide").removeClass("prevslide"); d.removeClass("activeslide").addClass("prevslide"); var f = a(c.el + " li:eq(" + vars.current_slide + ")"), i = c.$el.find(".prevslide"); if (c.options.performance == 1) { c.$el.removeClass("quality").addClass("speed") } loadSlide = false; vars.current_slide == c.options.slides.length - 1 ? loadSlide = 0 : loadSlide = vars.current_slide + 1; var k = c.el + " li:eq(" + loadSlide + ")"; if (!a(k).html()) { var j = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(k).wrap("<a " + imageLink + j + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } if (c.options.thumbnail_navigation == 1) { vars.current_slide - 1 < 0 ? prevThumb = c.options.slides.length - 1 : prevThumb = vars.current_slide - 1; a(vars.prev_thumb).html(a("<img/>").attr("src", c.options.slides[prevThumb].image)); nextThumb = loadSlide; a(vars.next_thumb).html(a("<img/>").attr("src", c.options.slides[nextThumb].image)) } if (typeof theme != "undefined" && typeof theme.beforeAnimation == "function") { theme.beforeAnimation("next") } if (c.options.slide_links) { a(".current-slide").removeClass("current-slide"); a(vars.slide_list + "> li").eq(vars.current_slide).addClass("current-slide") } f.css("visibility", "hidden").addClass("activeslide"); switch (c.options.transition) { case 0: case "none": f.css("visibility", "visible"); vars.in_animation = false; c.afterAnimation(); break; case 1: case "fade": f.css({ opacity: 0, visibility: "visible" }).animate({ opacity: 1, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 2: case "slideTop": f.css({ top: -c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 3: case "slideRight": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 4: case "slideBottom": f.css({ top: c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 5: case "slideLeft": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 6: case "carouselRight": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.animate({ left: -c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break; case 7: case "carouselLeft": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.animate({ left: c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break } return false }; c.prevSlide = function () { if (vars.in_animation || !api.options.slideshow) { return false } else { vars.in_animation = true } var h = vars.current_slide; if (vars.current_slide > 0) { vars.current_slide-- } else { if (c.options.loop) { vars.current_slide = c.options.slides.length - 1 } } if (h == vars.current_slide) { vars.in_animation = false; return false } clearInterval(vars.slideshow_interval); var g = c.options.slides, d = c.$el.find(".activeslide"); a(".prevslide").removeClass("prevslide"); d.removeClass("activeslide").addClass("prevslide"); var f = a(c.el + " li:eq(" + vars.current_slide + ")"), i = c.$el.find(".prevslide"); if (c.options.performance == 1) { c.$el.removeClass("quality").addClass("speed") } loadSlide = vars.current_slide; var k = c.el + " li:eq(" + loadSlide + ")"; if (!a(k).html()) { var j = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(k).wrap("<a " + imageLink + j + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } if (c.options.thumbnail_navigation == 1) { loadSlide == 0 ? prevThumb = c.options.slides.length - 1 : prevThumb = loadSlide - 1; a(vars.prev_thumb).html(a("<img/>").attr("src", c.options.slides[prevThumb].image)); vars.current_slide == c.options.slides.length - 1 ? nextThumb = 0 : nextThumb = vars.current_slide + 1; a(vars.next_thumb).html(a("<img/>").attr("src", c.options.slides[nextThumb].image)) } if (typeof theme != "undefined" && typeof theme.beforeAnimation == "function") { theme.beforeAnimation("prev") } if (c.options.slide_links) { a(".current-slide").removeClass("current-slide"); a(vars.slide_list + "> li").eq(vars.current_slide).addClass("current-slide") } f.css("visibility", "hidden").addClass("activeslide"); switch (c.options.transition) { case 0: case "none": f.css("visibility", "visible"); vars.in_animation = false; c.afterAnimation(); break; case 1: case "fade": f.css({ opacity: 0, visibility: "visible" }).animate({ opacity: 1, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 2: case "slideTop": f.css({ top: c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 3: case "slideRight": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 4: case "slideBottom": f.css({ top: -c.$el.height(), visibility: "visible" }).animate({ top: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 5: case "slideLeft": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); break; case 6: case "carouselRight": f.css({ left: -c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.css({ left: 0 }).animate({ left: c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break; case 7: case "carouselLeft": f.css({ left: c.$el.width(), visibility: "visible" }).animate({ left: 0, avoidTransforms: false }, c.options.transition_speed, function () { c.afterAnimation() }); d.css({ left: 0 }).animate({ left: -c.$el.width(), avoidTransforms: false }, c.options.transition_speed); break } return false }; c.playToggle = function () { if (vars.in_animation || !api.options.slideshow) { return false } if (vars.is_paused) { vars.is_paused = false; if (typeof theme != "undefined" && typeof theme.playToggle == "function") { theme.playToggle("play") } vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval) } else { vars.is_paused = true; if (typeof theme != "undefined" && typeof theme.playToggle == "function") { theme.playToggle("pause") } clearInterval(vars.slideshow_interval) } return false }; c.destroy = function () { if (vars.in_animation || !api.options.slideshow) { return } if (vars.is_paused) { api.playToggle() } clearInterval(vars.slideshow_interval); a(document.documentElement).off(".supersized"); a(".ssControlsContainer *").off("click"); var d = vars.options.slides[vars.current_slide].id; vars = null; api = null; a("#supersized-loader,#supersized,.ssControlsContainer").remove(); a("body .supersized_hidden").show().removeClass("supersized_hidden"); c.options.on_destroy.apply(null, [d]) }; c.goTo = function (e) { if (vars.in_animation || !api.options.slideshow) { return false } var d = c.options.slides.length; if (e < 0) { e = d } else { if (e > d) { e = 1 } } e = d - e + 1; clearInterval(vars.slideshow_interval); if (typeof theme != "undefined" && typeof theme.goTo == "function") { theme.goTo() } if (vars.current_slide == d - e) { if (!(vars.is_paused)) { vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval) } return false } if (d - e > vars.current_slide) { vars.current_slide = d - e - 1; vars.update_images = "next"; c._placeSlide(vars.update_images) } else { if (d - e < vars.current_slide) { vars.current_slide = d - e + 1; vars.update_images = "prev"; c._placeSlide(vars.update_images) } } if (c.options.slide_links) { a(vars.slide_list + "> .current-slide").removeClass("current-slide"); a(vars.slide_list + "> li").eq((d - e)).addClass("current-slide") } if (c.options.thumb_links) { a(vars.thumb_list + "> .current-thumb").removeClass("current-thumb"); a(vars.thumb_list + "> li").eq((d - e)).addClass("current-thumb") } }; c._placeSlide = function (d) { var g = c.options.new_window ? ' target="_blank"' : ""; loadSlide = false; if (d == "next") { vars.current_slide == c.options.slides.length - 1 ? loadSlide = 0 : loadSlide = vars.current_slide + 1; var f = c.el + " li:eq(" + loadSlide + ")"; if (!a(f).html()) { var g = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(f).wrap("<a " + imageLink + g + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } c.nextSlide() } else { if (d == "prev") { vars.current_slide - 1 < 0 ? loadSlide = c.options.slides.length - 1 : loadSlide = vars.current_slide - 1; var f = c.el + " li:eq(" + loadSlide + ")"; if (!a(f).html()) { var g = c.options.new_window ? ' target="_blank"' : ""; imageLink = (c.options.slides[loadSlide].url) ? "href='" + c.options.slides[loadSlide].url + "'" : ""; var e = a('<img src="' + c.options.slides[loadSlide].image + '"/>'); e.appendTo(f).wrap("<a " + imageLink + g + "></a>").parent().parent().addClass("image-loading").css("visibility", "hidden"); e.load(function () { c._origDim(a(this)); c.resizeNow() }) } c.prevSlide() } } }; c._origDim = function (d) { d.data("origWidth", d.width()).data("origHeight", d.height()) }; c.afterAnimation = function () { if (c.options.performance == 1) { c.$el.removeClass("speed").addClass("quality") } if (vars.update_images) { vars.current_slide - 1 < 0 ? setPrev = c.options.slides.length - 1 : setPrev = vars.current_slide - 1; vars.update_images = false; a(".prevslide").removeClass("prevslide"); a(c.el + " li:eq(" + setPrev + ")").addClass("prevslide") } vars.in_animation = false; if (!vars.is_paused && c.options.slideshow) { vars.slideshow_interval = setInterval(c.nextSlide, c.options.slide_interval); if (!c.options.loop && !c.options.auto_exit && vars.current_slide == c.options.slides.length - 1) { c.playToggle() } } if (typeof theme != "undefined" && typeof theme.afterAnimation == "function") { theme.afterAnimation() } return false }; c.getField = function (d) { return c.options.slides[vars.current_slide][d] }; c.init() }; a.supersized.vars = { thumb_tray: "#thumb-tray", thumb_list: "#thumb-list", slide_list: "#slide-list", current_slide: 0, in_animation: false, is_paused: false, hover_pause: false, slideshow_interval: false, update_images: false, options: {} }; a.supersized.defaultOptions = { slideshow: 1, autoplay: 1, auto_exit: 0, start_slide: 1, loop: 1, random: 0, slide_interval: 5000, transition: 1, transition_speed: 750, new_window: 1, pause_hover: 0, keyboard_nav: 1, performance: 1, image_protect: 1, fit_always: 0, fit_landscape: 0, fit_portrait: 1, min_width: 0, min_height: 0, horizontal_center: 1, vertical_center: 1, slide_links: 1, thumb_links: 1, thumbnail_navigation: 0, on_destroy: function () { } }; a.fn.supersized = function (b) { return this.each(function () { (new a.supersized(b)) }) } })(jQuery);
//@ sourceMappingURL=supersized.3.2.7.min.js.map